function results = util_htpCreateRFile( action, path_to_results, varargin )
% Creates R statistics project and script files from vHTP output
%% Syntax
%   results = util_htpCreateRFile( action, outputdir, functionname )
%% Input
%   action  [char] - 'create_project' or 'create_import'
%   outputdir [char] - folder to place files
%   functionname [char] - htp function name (subfolder for results)
%   isParquet [logical] - alternative input for Parquet file
%% Output
%   results [struct] - output files
%% Disclaimer
%   Part of the Cincinnati Visual High Throughput EEG Pipeline
%
%% Code
timestamp    = datestr(now,'yymmddHHMMSS');  % timestamp
functionstamp = mfilename; % function name for logging/output

[note] = htp_utilities();
note('R utilities for Visual High Throughput Pipeline', '*blue');

defaultProjectFilename = 'RProject_htpExample.Rproj';
defaultUseParquet = false;

validateAction = @( ext ) ischar( ext ) & any(ismember(ext, {'makeProject','makeImport'}));
validateFolder = @( folder ) exist(folder,"dir") ==7;

% MATLAB built-in input validation
ip = inputParser();   
addRequired(ip, 'action', validateAction);
addRequired(ip,'outputdir', validateFolder);
addParameter(ip,'functionname', @ischar);
addParameter(ip,'projectFilename', defaultProjectFilename, @ischar);
addParameter(ip,'useParquet', defaultUseParquet, @islogical);

parse(ip,action, path_to_results, varargin{:});

functionname = ip.Results.functionname;
projectFilename = ip.Results.projectFilename;

results = [];
if ~nargin == 0
    switch action
        case 'makeProject'
            [~, fileonly, ~] = fileparts(projectFilename);
            fname = fullfile(path_to_results, [fileonly '.RProj']);
            % Create R Project in Results Directory
            try
                fid = fopen( fname, 'wt' );
                fprintf(fid, "Version: 1.0\n\n" + ...
                    "RestoreWorkspace: Default\n" + ...
                    "SaveWorkspace: Default\n" + ...
                    "AlwaysSaveHistory: Default\n\n" + ...
                    "EnableCodeIndexing: Yes\n" + ...
                    "UseSpacesForTab: Yes\n" + ...
                    "NumSpacesForTab: 2\n" + ...
                    "Encoding: UTF-8\n\n" + ...
                    "RnwWeave: Sweave\n" + ...
                    "LaTeX: pdfLaTeX\n");
                fclose(fid);
                note(sprintf('Project created at %s', fname));
                note(hyperlink(['cd(''' path_to_results ''')'], 'Click here to switch to result directory.'))
            catch
                note(sprintf('Error creating Project: %s', fname));
            end
        case 'makeImport'
            % Create R Project in Results Directory
            if ~isempty(functionname) && ~isempty(path_to_results)
                analysis_dir = fullfile(path_to_results, functionname);
                % check output directory
                if exist(analysis_dir, 'dir')
                    note(sprintf('Output in %s', analysis_dir));
                    rfile = fullfile(path_to_results, [functionname '.R']);
                else
                    note(sprintf('%s not found.', analysis_dir));
                end

                if ip.Results.useParquet
                    import_code = '*.parquet';
                    import_fcn = 'arrow::read_parquet';
                else
                    import_code = '*.csv';
                    import_fcn = 'readr::read_csv';
                end

                unix_style_path = strrep( analysis_dir, '\', '/' );

                codeblock = sprintf(['# Function: %s \n' ...   % functionname
                        '# Date: %s\n' ...  % timestamp
                        '# Autogenerated by util_htpCreateRFile.m\n\n'  ...
                        '# Libraries\n' ...
                        'library( tidyverse )\n' ...
                        'library( arrow )  # write/read parquet files\n\n' ...
                        '# Data Folder\n' ...
                        'function_name = "%s"\n' ...   % functionname
                        'data_dir = "%s"\n' ...   % unix_style_path
                        'data_type =  "%s"\n' ...  % import_code
                        '\ndf.%s <- dir(path=data_dir, pattern = data_type, full.names=TRUE) %s\n' ... % functionname, pipe
                        'map(%s) %s reduce(rbind)\n\n'], functionname, ... % import_fcn, pipe
                        timestamp, functionname, unix_style_path,  import_code, functionname, '%%>%%', import_fcn, '%%>%%');

                fid = fopen( rfile, 'wt' );
                fprintf(fid, codeblock);
                fclose(fid);
            end
        otherwise
            fprintf('\nutil_htpCreateRFile - vhtp R utilities\n');
            fprintf('--------------------------------------\n');
            fprintf('Invalid action. See comments. \n\n')
    end
 else
    note('usage: util_htpCreateRFile( action, outputdir, functionname);', 'blue');
    note(sprintf('\taction 1: ''makeProject'''), 'blue');
    note(sprintf('\taction 2: ''makeImport'''));
end

    function note = htp_utilities()
        % using color printf if needed
        if exist('cprintf.m', 'file') == 2
            note        = @(msg, style) cprintf('blue', '%s: %s\n', mfilename, msg );
        else
            note        = @(msg, style) fprintf('%s: %s\n', mfilename, msg );
        end
    end

    function link = hyperlink( command, label )
        link = sprintf('<a href="matlab:%s">%s</a>', command, label);
    end

end